## Set the current directory (where the R script exists) as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))

##### Just before this you need to run the .R script named "convert&process.R"
####Merge all the files #####################################
require(plyr)
## Read files from different directory. * means any character (any number) 
dat1 <- (read.csv(Sys.glob("Expt 01_ITRAQ*/*114*B4Merge.csv"),check.names = F))
dat2 <- (read.csv(Sys.glob("Expt 02_ITRAQ*/*115*B4Merge.csv"),check.names = F))
dat3 <- (read.csv(Sys.glob("Expt 03_ITRAQ*/*113*B4Merge.csv"),check.names = F))
is.data.frame(dat1)
#files <- list.files(pattern = "dbf") #Join all by typing 'inner'/'full'
df <- join_all(list(dat1,dat2,dat3), by = "Accession", type = 'inner') 
df1 <- as.data.frame(df)
write.csv(df1, "merged-processed-files.csv", row.names = F)

#Experiments' labels at different time points. Please confirm these labels first ########### 
iTRAQ_4h <- as.character("Peptides|iTRAQ1.+116:114|iTRAQ2.+116:115|iTRAQ3.+114:113")
iTRAQ_7h <- as.character("Peptides|iTRAQ2.+117:115|iTRAQ3.+115:113")
iTRAQ_18h <- as.character("Peptides|iTRAQ1.+118:114|iTRAQ2.+118:115|iTRAQ3.+116:113|iTRAQ3.+118:113")
#########################Read data#############################################
merged.dat <- read.csv("merged-processed-files.csv", header=TRUE, check.names = F)
# Data subsetting 
prot.nams <- as.data.frame(merged.dat[,1:2])
colnames(prot.nams) <- c("Accession","Protein_names")

Filtered.4h <- cbind (prot.nams,merged.dat[grep(iTRAQ_4h, names(merged.dat),invert=F)])
Filtered.7h <- cbind (prot.nams,merged.dat[grep(iTRAQ_7h, names(merged.dat),invert=F)])
Filtered.18h <- cbind (prot.nams,merged.dat[grep(iTRAQ_18h, names(merged.dat),invert=F)])

#########################Calculations######################################
## Stouffer-test function #################################################
Stouffer.test<- function(p, w) {  # p: is a vector of p-values # w: Vector of weights 
  if (missing(w)) {
    w <- rep(1, length(p))/length(p)
  } else {
    if (length(w) != length(p))
      stop("Length of p and w must equal!")
  }
  logp<- log(p)     ## log transform pvalues
  Zi <- -qnorm(logp, log.p= TRUE) ## Work in log space
  Z  <- sum(w*Zi)/sqrt(sum(w^2))
  p.val <- -pnorm(Z, log.p= TRUE)
  out.p<- c(Z_score= Z, Stouffers_p.value= p.val)
  #out.p<- c(Stouffers_p.value= p.val)
  return(out.p)
}
######## Calculate geom and stouffers p val ##################
geo.mean <- function(filtered_data){
  prod(filtered_data)^(1/length(filtered_data))
  }
###########Function containing various Functions##########################
calc_pep.geom_geom_stpval <- function(filtered_data, tag ) {
  #Calculate geomatric mean of peptides with 95% confidence
  pep.Geomean <- apply(filtered_data[grep("Peptides", names(filtered_data))],1, geo.mean)
  pep.Geomean.dat <- as.data.frame(pep.Geomean)
  #Calculate geomatric mean of 'peptides-ratio of log2 values'
  Geomean <- apply(filtered_data[grep("iTRAQ._11", names(filtered_data))],1, geo.mean)
  Geomean.dat <- as.data.frame(Geomean)
  #Calculate Stouffer's p value
  Stouffers.pval <- t(apply(filtered_data[grep("PVal", names(filtered_data))],1, Stouffer.test))
  output <- cbind(filtered_data,pep.Geomean.dat,Geomean.dat,Stouffers.pval)
  output.df <- as.data.frame(output)
  #can I get a tagg
  tagged<- paste(as.character(tag), colnames(output.df), sep = "_")
  tagged_output <- data.frame(`colnames<-`(output.df,tagged),check.names = F)
  return(tagged_output)
}
## Apply function on filtered dataset###############################################################
Cal_4h <- calc_pep.geom_geom_stpval(Filtered.4h, "4h")
Cal_7h <- calc_pep.geom_geom_stpval(Filtered.7h, "7h")
Cal_18h <- calc_pep.geom_geom_stpval(Filtered.18h, "18h")
merged <- cbind(Cal_4h,Cal_7h,Cal_18h)
write.csv(merged,"final_raw.values_b4.csv", row.names = F)

## Subseting up & down regulated proteins #######################
upreg.list <- function(cal_time){
  up<- subset(cal_time, cal_time[grep("_Geomean", names(cal_time))] >= 1.5 & 
                cal_time[grep("p.value", names(cal_time))] <= 0.05)
  return(up)
}
downreg.list <- function(cal_time){
  down<- subset(cal_time, cal_time[grep("_Geomean", names(cal_time))] <= 0.667 & 
                cal_time[grep("p.value", names(cal_time))] <= 0.05)
  return(down)
}
## Function ends ######################################################################
########################################################################

required.cols <- as.character("Accession|Protein_name|pep.Geomean|_Geomean|p.value")

A <- upreg.list (Cal_4h[grep(required.cols, names(Cal_4h))])
B <- downreg.list (Cal_4h[grep(required.cols, names(Cal_4h))])
C <- upreg.list (Cal_7h[grep(required.cols, names(Cal_7h))])
D <- downreg.list (Cal_7h[grep(required.cols, names(Cal_7h))])
E <- upreg.list (Cal_18h[grep(required.cols, names(Cal_18h))])
F <- downreg.list (Cal_18h[grep(required.cols, names(Cal_18h))])

#working on this line
library(xlsx)
write.xlsx(A, file="Diff.Protiens.xlsx", sheetName="up_4h", row.names=FALSE)
write.xlsx(B, file="Diff.Protiens.xlsx", sheetName="down_4h", row.names=FALSE, append=TRUE)
write.xlsx(C, file="Diff.Protiens.xlsx", sheetName="up_7h", row.names=FALSE, append=TRUE)
write.xlsx(D, file="Diff.Protiens.xlsx", sheetName="down_7h", row.names=FALSE, append=TRUE)
write.xlsx(E, file="Diff.Protiens.xlsx", sheetName="up_18h", row.names=FALSE, append=TRUE)
write.xlsx(F, file="Diff.Protiens.xlsx", sheetName="down_18h", row.names=FALSE, append=TRUE)
#############################ENDS###########################################

#volcano_plot
dat.file <- read.csv("final_raw.values_b4.csv", header=TRUE, check.names = T)
# 3 figudat.file arranged in 1 rows and 3 column
par(mfcol=c(1,1)) 
#volcano_plot_1 (for one time point)
# Make a basic volcano plot
with(dat.file, plot(log2(X4h_Geomean), -log10(X4h_Stouffers_p.value), pch=1, main="Volcano plot", xlim=c(-3.5,3.5),ylim=c(0,14)))

with(subset(dat.file, X4h_Stouffers_p.value <= 0.05 & X4h_Geomean <= 1.5 & X4h_Geomean >= 0.667), points(log2(X4h_Geomean), -log10(X4h_Stouffers_p.value), pch=1, col="blue"))
with(subset(dat.file, X4h_Stouffers_p.value<= 0.05 & abs(X4h_Geomean)>= 1.5), points(log2(X4h_Geomean), -log10(X4h_Stouffers_p.value), pch=20, col="red"))
with(subset(dat.file, X4h_Stouffers_p.value<= 0.05 & abs(X4h_Geomean)<= 0.66), points(log2(X4h_Geomean), -log10(X4h_Stouffers_p.value), pch=20, col="green"))

# Label points with the textxy function from the calibrate plot
#install.packages("calibrate")
library(calibrate)
with(subset(dat.file, X4h_Stouffers_p.value<= 0.05 & abs(X4h_Geomean)>=1.5), 
     textxy(log2(X4h_Geomean), -log10(X4h_Stouffers_p.value), labs=X4h_Protein_names, cex=.3, offset = 0.7))
with(subset(dat.file, X4h_Stouffers_p.value<=0.05 & abs(X4h_Geomean)<=0.66), 
     textxy(log2(X4h_Geomean), -log10(X4h_Stouffers_p.value), labs=X4h_Protein_names, cex=.3, offset = 0.7))

abline(h=-log10(0.05),col="blue",lty="44")                    # horizontal line at P=0.05
abline(v=c(log2(1.5), log2(0.66)), col="blue",lty="1343")  # vertical lines at 1.5-fold

#volcano_plot_2 (for one time point)
# Make a basic volcano plot
with(dat.file, plot(log2(X7h_Geomean), -log10(X7h_Stouffers_p.value), pch=1, main="Volcano plot", xlim=c(-3.5,3.5),ylim=c(0,14)))

with(subset(dat.file, X7h_Stouffers_p.value <= 0.05 & X7h_Geomean <= 1.5 & X7h_Geomean >= 0.667), points(log2(X7h_Geomean), -log10(X7h_Stouffers_p.value), pch=1, col="blue"))
with(subset(dat.file, X7h_Stouffers_p.value<=0.05 & abs(X7h_Geomean)>=1.5), points(log2(X7h_Geomean), -log10(X7h_Stouffers_p.value), pch=20, col="red"))
with(subset(dat.file, X7h_Stouffers_p.value<=0.05 & abs(X7h_Geomean)<=0.66), points(log2(X7h_Geomean), -log10(X7h_Stouffers_p.value), pch=20, col="green"))

# Label points with the textxy function from the calibrate plot
#install.packages("calibrate")
library(calibrate)
with(subset(dat.file, X7h_Stouffers_p.value<=0.05 & abs(X7h_Geomean)>=1.5), 
     textxy(log2(X7h_Geomean), -log10(X7h_Stouffers_p.value), labs=X4h_Protein_names, cex=.3, offset = 0.7))
with(subset(dat.file, X7h_Stouffers_p.value<=0.05 & abs(X7h_Geomean)<=0.66), 
     textxy(log2(X7h_Geomean), -log10(X7h_Stouffers_p.value), labs=X4h_Protein_names, cex=.3, offset = 0.7))

abline(h=-log10(0.05),col="blue",lty="44")                    # horizontal line at P=0.05
abline(v=c(log2(1.5), log2(0.66)), col="blue",lty="1343")  # vertical lines at 1.5-fold

#volcano_plot_3 (for one time point)
# Make a basic volcano plot
with(dat.file, plot(log2(X18h_Geomean), -log10(X18h_Stouffers_p.value), pch=1, main="Volcano plot", xlim=c(-3.5,3.5),ylim=c(0,14)))

with(subset(dat.file, X18h_Stouffers_p.value <= 0.05 & X18h_Geomean <= 1.5 & X18h_Geomean >= 0.667), points(log2(X18h_Geomean), -log10(X18h_Stouffers_p.value), pch=1, col="blue"))
with(subset(dat.file, X18h_Stouffers_p.value<=.05 & abs(X18h_Geomean)>=1.5), points(log2(X18h_Geomean), -log10(X18h_Stouffers_p.value), pch=20, col="red"))
with(subset(dat.file, X18h_Stouffers_p.value<=.05 & abs(X18h_Geomean)<=0.66), points(log2(X18h_Geomean), -log10(X18h_Stouffers_p.value), pch=20, col="green"))

# Label points with the textxy function from the calibrate plot
#install.packages("calibrate")
library(calibrate)
with(subset(dat.file, X18h_Stouffers_p.value<=0.05 & abs(X18h_Geomean)>=1.5), 
     textxy(log2(X18h_Geomean), -log10(X18h_Stouffers_p.value), labs=X4h_Protein_names, cex=.3, offset = 0.7))
with(subset(dat.file, X18h_Stouffers_p.value<=0.05 & abs(X18h_Geomean)<=0.66), 
     textxy(log2(X18h_Geomean), -log10(X18h_Stouffers_p.value), labs=X4h_Protein_names, cex=.3, offset = 0.7))

abline(h=-log10(0.05),col="blue",lty="44")                    # horizontal line at P=0.05
abline(v=c(log2(1.5), log2(0.66)), col="blue",lty="1343")  # vertical lines at 1.5-fold

